{
  "filePath": "./src/components/toggle/toggle.tsx",
  "encapsulation": "shadow",
  "tag": "ion-toggle",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "- The label text to associate with the toggle. Use the \"labelPlacement\" property to control where the label is placed relative to the toggle."
    },
    {
      "name": "part",
      "text": "track - The background track of the toggle."
    },
    {
      "name": "part",
      "text": "handle - The toggle handle, or knob, used to change the checked state."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "checked",
      "type": "boolean",
      "mutable": true,
      "attr": "checked",
      "reflectToAttr": false,
      "docs": "If `true`, the toggle is selected.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the toggle.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "enableOnOffLabels",
      "type": "boolean | undefined",
      "mutable": false,
      "attr": "enable-on-off-labels",
      "reflectToAttr": false,
      "docs": "Enables the on/off accessibility switch labels within the toggle.",
      "docsTags": [],
      "default": "config.get('toggleOnOffLabels')",
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "justify",
      "type": "\"end\" | \"space-between\" | \"start\"",
      "mutable": false,
      "attr": "justify",
      "reflectToAttr": false,
      "docs": "How to pack the label and toggle within a line.\n`\"start\"`: The label and toggle will appear on the left in LTR and\non the right in RTL.\n`\"end\"`: The label and toggle will appear on the right in LTR and\non the left in RTL.\n`\"space-between\"`: The label and toggle will appear on opposite\nends of the line with space between the two elements.",
      "docsTags": [],
      "default": "'space-between'",
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "space-between",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "labelPlacement",
      "type": "\"end\" | \"fixed\" | \"start\"",
      "mutable": false,
      "attr": "label-placement",
      "reflectToAttr": false,
      "docs": "Where to place the label relative to the input.\n`\"start\"`: The label will appear to the left of the toggle in LTR and to the right in RTL.\n`\"end\"`: The label will appear to the right of the toggle in LTR and to the left in RTL.\n`\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").",
      "docsTags": [],
      "default": "'start'",
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "fixed",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "legacy",
      "type": "boolean | undefined",
      "mutable": false,
      "attr": "legacy",
      "reflectToAttr": false,
      "docs": "Set the `legacy` property to `true` to forcibly use the legacy form control markup.\nIonic will only opt components in to the modern form markup when they are\nusing either the `aria-label` attribute or the default slot that contains\nthe label text. As a result, the `legacy` property should only be used as\nan escape hatch when you want to avoid this automatic opt-in behavior.\nNote that this property will be removed in an upcoming major release\nof Ionic, and all form components will be opted-in to using the modern form markup.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "value",
      "type": "null | string | undefined",
      "mutable": false,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the toggle does not mean if it's checked or not, use the `checked`\nproperty for that.\n\nThe value of a toggle is analogous to the value of a `<input type=\"checkbox\">`,\nit's only used when the toggle participates in a native `<form>`.",
      "docsTags": [],
      "default": "'on'",
      "values": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "methods": [],
  "events": [
    {
      "event": "ionBlur",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the toggle loses focus.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "ToggleChangeEventDetail<any>",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user switches the toggle on or off. Does not emit\nwhen programmatically changing the value of the `checked` property.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the toggle has focus.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the toggle track"
    },
    {
      "name": "--handle-background",
      "annotation": "prop",
      "docs": "Background of the toggle handle"
    },
    {
      "name": "--handle-background-checked",
      "annotation": "prop",
      "docs": "Background of the toggle handle when checked"
    },
    {
      "name": "--handle-border-radius",
      "annotation": "prop",
      "docs": "Border radius of the toggle handle"
    },
    {
      "name": "--handle-box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the toggle handle"
    },
    {
      "name": "--handle-height",
      "annotation": "prop",
      "docs": "Height of the toggle handle"
    },
    {
      "name": "--handle-max-height",
      "annotation": "prop",
      "docs": "Maximum height of the toggle handle"
    },
    {
      "name": "--handle-spacing",
      "annotation": "prop",
      "docs": "Horizontal spacing around the toggle handle"
    },
    {
      "name": "--handle-transition",
      "annotation": "prop",
      "docs": "Transition of the toggle handle"
    },
    {
      "name": "--handle-width",
      "annotation": "prop",
      "docs": "Width of the toggle handle"
    },
    {
      "name": "--track-background",
      "annotation": "prop",
      "docs": "Background of the toggle track"
    },
    {
      "name": "--track-background-checked",
      "annotation": "prop",
      "docs": "Background of the toggle track when checked"
    }
  ],
  "slots": [
    {
      "name": "",
      "docs": "The label text to associate with the toggle. Use the \"labelPlacement\" property to control where the label is placed relative to the toggle."
    }
  ],
  "parts": [
    {
      "name": "handle",
      "docs": "The toggle handle, or knob, used to change the checked state."
    },
    {
      "name": "track",
      "docs": "The background track of the toggle."
    }
  ],
  "dependents": [],
  "dependencies": [
    "ion-icon"
  ],
  "dependencyGraph": {
    "ion-toggle": [
      "ion-icon"
    ]
  }
}